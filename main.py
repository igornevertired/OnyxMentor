import logging
import os

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
import random

# –í–∫–ª—é—á–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

BOT_TOKEN = os.getenv('TELEGRAM_BOT_KEY')

# –í–æ–ø—Ä–æ—Å –∏ —ç—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
QUESTION = "–ù–∞–∑–æ–≤–∏—Ç–µ –ø—è—Ç—å –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤ Python."
CORRECT_ANSWER = "—á–∏—Å–ª–∞ —Å—Ç—Ä–æ–∫–∏ —Å–ø–∏—Å–∫–∏ –∫–æ—Ä—Ç–µ–∂–∏ —Å–ª–æ–≤–∞—Ä–∏"
# –ü—Ä–∏–≤–æ–¥–∏–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

# –°–ø–∏—Å–∫–∏ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ "—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"
CONFIDENCE_INDICATORS = {
    "high": ["—É–≤–µ—Ä–µ–Ω–Ω–æ", "—á–µ—Ç–∫–æ", "–±–µ–∑ –ø–∞—É–∑", "—Ä–æ–≤–Ω—ã–º –≥–æ–ª–æ—Å–æ–º"],
    "low": ["—Å –ø–∞—É–∑–∞–º–∏", "–Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ", "—Ç–∏—Ö–∏–º –≥–æ–ª–æ—Å–æ–º", "—Å –∑–∞–ø–∏–Ω–∫–∞–º–∏"]
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–∞—á–∞—Ç—å."""
    keyboard = [['üé§ –ü–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π.\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
        reply_markup=reply_markup
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –†–µ–∞–≥–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–Ω–æ–ø–∫—É."""
    user_message = update.message.text

    if user_message == 'üé§ –ü–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç
        context.user_data['awaiting_voice'] = True
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(
            f"–í–æ–ø—Ä–æ—Å:\n\n**{QUESTION}**\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!",
            parse_mode='Markdown',
            reply_markup=ReplyKeyboardRemove() # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
        )
    else:
        await update.message.reply_text("–ù–∞–∂–º–∏ '–ü–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

def simulate_speech_to_text(voice_file):
    """
    –§—É–Ω–∫—Ü–∏—è-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞ –≤ —Ç–µ–∫—Å—Ç.
    –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –≤ OpenAI Whisper API –∏–ª–∏ –¥—Ä—É–≥–æ–π ASR-—Å–µ—Ä–≤–∏—Å.
    """
    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π, –∏–Ω–æ–≥–¥–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π, –æ—Ç–≤–µ—Ç.
    simulated_answers = [
        "—á–∏—Å–ª–∞ —Å—Ç—Ä–æ–∫–∏ —Å–ø–∏—Å–∫–∏ –∫–æ—Ä—Ç–µ–∂–∏ —Å–ª–æ–≤–∞—Ä–∏",
        "—á–∏—Å–ª–∞ —Å—Ç—Ä–æ–∫–∏ —Å–ø–∏—Å–∫–∏ –∫–æ—Ä—Ç–µ–∂–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞", # –û—à–∏–±–∫–∞
        "—á–∏—Å–ª–∞ —Å—Ç—Ä–æ–∫–∏ —Å–ø–∏—Å–∫–∏ —Å–ª–æ–≤–∞—Ä–∏", # –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂–µ–π
        "—è –Ω–µ –∑–Ω–∞—é" # –ü–æ–ª–Ω–∞—è –Ω–µ—É–¥–∞—á–∞
    ]
    # –î–∞–≤–∞–π—Ç–µ —á–∞—â–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
    weights = [0.6, 0.15, 0.15, 0.1]
    return random.choices(simulated_answers, weights=weights, k=1)[0]

def analyze_answer(recognized_text):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
    1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞.
    2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç "–æ—Ü–µ–Ω–∫—É —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏" (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏).
    """
    # –ü—Ä–∏–≤–æ–¥–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    recognized_text_lower = recognized_text.lower()

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏
    # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞?
    correct_keywords = set(CORRECT_ANSWER.split())
    user_keywords = set(recognized_text_lower.split())
    matched_keywords = correct_keywords.intersection(user_keywords)

    correctness_score = len(matched_keywords) / len(correct_keywords)

    # 2. "–ê–Ω–∞–ª–∏–∑" —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (—Å–∏–º—É–ª—è—Ü–∏—è)
    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –º–æ–≥ –±—ã –±—ã—Ç—å –∞–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ (—Ç–æ–Ω, –ø–∞—É–∑—ã, –∞–º–ø–ª–∏—Ç—É–¥–∞)
    # –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —Å —É–∫–ª–æ–Ω–æ–º –≤ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
    if correctness_score > 0.7:
        confidence_level = "high"
        confidence_comment = random.choice(CONFIDENCE_INDICATORS["high"])
    else:
        confidence_level = "low"
        confidence_comment = random.choice(CONFIDENCE_INDICATORS["low"])

    # 3. –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–¥–±—ç–∫
    feedback = f"*–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:* {recognized_text}\n\n"
    feedback += f"*–ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞:* {correctness_score:.0%}\n"
    if correctness_score == 1:
        feedback += "‚úÖ –û—Ç–ª–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç! –í—Å–µ –≤–µ—Ä–Ω–æ.\n"
    elif correctness_score > 0.5:
        feedback += "‚ö†Ô∏è –ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –µ—Å—Ç—å –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏.\n"
        missing = correct_keywords - user_keywords
        if missing:
            feedback += f"*–ù–µ —Ö–≤–∞—Ç–∏–ª–æ:* {', '.join(missing)}\n"
    else:
        feedback += "‚ùå –û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –æ—á–µ–Ω—å –Ω–µ—Ç–æ—á–Ω—ã–π.\n"
        feedback += f"*–ñ–¥–∞–ª–∏:* {CORRECT_ANSWER.replace(' ', ', ')}\n"

    feedback += f"\n*–ê–Ω–∞–ª–∏–∑ —Ä–µ—á–∏:* –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ {confidence_comment}.\n"
    feedback += f"*–£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:* {confidence_level}"

    return feedback

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–∞–ª –ª–∏ –±–æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
    if not context.user_data.get('awaiting_voice'):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ '–ü–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å'.")
        return

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
    context.user_data['awaiting_voice'] = False

    # –°–æ–æ–±—â–∞–µ–º, —á—Ç–æ –Ω–∞—á–∞–ª–∞—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∞
    processing_msg = await update.message.reply_text("üéß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å...")

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    voice_file = await update.message.voice.get_file()

    # –í –†–ï–ê–õ–¨–ù–û–ú –ë–û–¢–ï: –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª (await voice_file.download_to_drive('voice.ogg'))
    # –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –≤ API –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, OpenAI Whisper).

    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
    recognized_text = simulate_speech_to_text(voice_file)

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    analysis_result = analyze_answer(recognized_text)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
    await processing_msg.delete()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä
    await update.message.reply_text(
        f"**–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:**\n\n{analysis_result}\n\n"
        "–ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑.",
        parse_mode='Markdown'
    )

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–µ–º Application –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()